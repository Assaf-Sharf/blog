프론트엔드 개발은 사용자 경험을 향상시키는 데 중요한 역할을 한다.

현대의 웹 애플리케이션은 복잡하고 다양한 입력 폼과 상호 작용을 포함하며, 이를 관리하고 검증하는 것은 매우 중요하다. 이에 따라 코드의 재사용성과 에러 관리는 더욱 중요해진다. 

이 글에서는 고차 함수를 이용하여 프론트엔드 개발에서 재사용성을 높이고, Input 상태를 효과적으로 다루는 방법에 대해 살펴보자.

### **고차 함수 사용하기 전 input 상태 관리**

고차 함수를 사용하지 않고, useState로 Input의 상태를 관리하면서 입력 받은 값을 검증하는 과정을 간단히 구현하면 아래와 같을 것이다. (예시. 파일 사이즈가 1MB 이상인지 확인)

```javascript
const App = () => {
    const [fileValue, setFileValue] = React.useState("");
    const [fileSizeError, setFileError] = React.useState("");

    // 파일 용량 검사
    const isFileSizeUnder1MB = _file => { 
        const maxSizeInBytes = 1024 * 1024;
    
        return _file?.size < maxSizeInBytes
    }

		// onChange 이벤트 핸들러
    const handleChangeFile = (event) => {
        const file = event?.target?.files[0];

        if(isFileSizeUnder1MB(file)) {
            setFileValue(file);
        } else {
            setFileError("파일 용량이 1MB가 넘습니다.");
        }
    }

    return (
        <div className="container">
            <input onChange={handleChangeFile} value={fileValue} />
            <p>{fileSizeError}</p>
        </div>
    );
}

export default App;
```


위 코드를 살펴볼 때 기능상으로는 문제가 없다. 그러나 위 코드는 검증해야 할 값이 1개일 때만을 고려한 코드다. 검증해야 할 값이 더 늘어나면 어떻게 될까?

예를 들어 프로필 관리 페이지에는 이름, 전화번호, 직업, 프로필 사진과 같은 여러 가지 입력 필드가 있을 수 있다. 위와 같은 방식으로 작업을 수행한다면 중복되는 코드 양이 크게 증가하게 된다.

하지만 함수형 프로그래밍의 고차 함수를 활용하면 이러한 문제를 간단하게 해결할 수 있다.

### **고차 함수를 사용한다면**

고차 함수는 함수를 인자로 받거나 반환해 함수의 재사용성을 높이고 로직을 추상화하여 코드 중복을 효과적으로 줄일 수 있다.

이를 통해 여러 가지 입력 필드와 검증 규칙이 존재하는 상황에서도, 함수를 한 번 작성함으로써 다양한 곳에서 재사용할 수 있다. 

또한 검증 로직이 한 곳에 집중되므로 코드의 작동 방식을 더 명확하게 이해할 수 있어 가독성과 유지 보수성이 향상된다.

작업을 시작하기 전 어떤 로직이 공통으로 사용되는지를 파악해야 한다. 아래는 중복되는 흐름을 정리한 것이다.

- 사용자가 입력 필드에 값을 입력
- 입력 받은 값을 검증 함수로 검증
- 검증 결과에 따라 에러 상태 관리

그러면 고차 함수의 특징 중 하나인 파라미터로 함수를 받을 수 있다는 특성을 활용하여 검증 함수를 파라미터로 받고, 그 결과를 반환하도록 해보자.

